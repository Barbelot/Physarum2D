#define HALFPI 1.57079632679
#define PI 3.14159265359
#define TWOPI 6.28318530718
#define DEG2RAD 0.01745329251

#define NUM_THREADS 32
#define GRADIENT_LENGTH 8

#pragma kernel InitParticles
#pragma kernel SpawnParticles
#pragma kernel MoveParticles
#pragma kernel UpdateTrail
#pragma kernel AdvectTrail
#pragma kernel UpdateVelocities
#pragma kernel CleanParticleTexture
#pragma kernel WriteParticleTexture
#pragma kernel UpdateParticleMap

#include "Random.cginc"

struct Particle
{
	float2 position; 	// between 0-1
	float angle;	// in radians
	float4 color;
	float age;
	float lifetime;
	float stimuliIntensity;
};

float2 _TrailResolution;
float2 _TrailSize;
float _Decay;
float _RepulsionLimit;
float _VelocitiesDecay;

bool _StimuliActive;
float2 _StimuliResolution;
float _StimuliIntensity;
bool _StimuliToColor;

float _DeltaTime;
float _AbsoluteTime;

RWStructuredBuffer<Particle> _ParticleBuffer;
Texture2D<float4> _TrailRead;
RWTexture2D<float4> _TrailWrite;
RWTexture2D<float4> _VelocitiesBuffer;
Texture2D<float4> _Stimuli;
RWTexture2D<float4> _ParticleTexture;
RWTexture2D<float4> _ParticlePositionMap;

float2 _EmitterPosition;
float2 _EmitterPreviousPosition;
float _EmitterRadius;
float _EmitterRadiusWidth;
float _EmitterArcLength;
float _EmitterArcOffset;
float _EmitterArcFeathering;
float _EmitterSpawnRate;
int _EmitterCapacity;
float _EmitterColorIntensity;
float4 _EmitterMainColor;
float4 _EmitterSecondaryColor;
float _EmitterSecondaryColorProbability;
float2 _EmitterLifetimeMinMax;
bool _EmitterUseColorOverLife;
float4 _EmitterColorOverLife[GRADIENT_LENGTH];
bool _EmitterSpawnInStimuliOnly;

float _EmitterSensorAngle;
//float _EmitterRotationAngle;
float _EmitterSensorOffsetDistance;
float _EmitterStepSize;

float2 _ParticlePositionMapSize;

float2 _Gravity;

float _DirectionAngle;
float _DirectionStrength;

Texture2D<float4> _FluidTexture;
float2 _FluidResolution;
float _FluidStrength;
float _FluidAdvection;

bool _UseInfluenceMap;
Texture2D<float4> _InfluenceMap;
float _InfluenceStrength;

bool _Test;

SamplerState linearClampSampler;

/**********************
FUNCTIONS
**********************/

float directTo(float2 pos, float2 directedPos)
{
	float2 direction = directedPos - pos;
	return atan2(direction.y, direction.x);
}

//return 1 if v inside the circle, return 0 otherwise
float insideCircle(float2 v, float2 center, float radius)
{
	float2 position = v - center;
	return (step(radius, length(position)) + 1.0) % 2.0;
}

float randomSign(float v)
{
	float x = Random(v);
	return (step(0.5, x) * 2.0) - 1.0;
}

float2 RandomInsideCircle(uint seed, float2 center, float radius) {

	float randomAngle = Random(seed) * TWOPI;
	return float2(cos(randomAngle), sin(randomAngle)) * radius * Random(seed + 1) + center;
}

float2 RandomOnCircle(uint seed, float2 center, float radius, float width, float arcLength, float arcOffset, float arcFeathering) {

	float rand = Random(seed);

	//Remap in [-1, 1]
	rand = rand * 2 - 1;

	//Feathering
	rand = lerp(rand, rand * rand * rand, arcFeathering);

	float randomAngle = rand * 0.5f * arcLength + arcOffset;

	if (width >= radius) {
		return float2(cos(randomAngle), sin(randomAngle)) * radius * Random(seed + 1) + center;
	}
	else {
		return float2(cos(randomAngle), sin(randomAngle)) * (radius + lerp(-width * lerp(1, (1.0f - abs(rand)), arcFeathering), 0, Random(seed + 1))) + center;
	}
}

void InitParticle(uint3 id) {

	//_ParticleBuffer[id.x].position = RandomInsideCircle(id.x + 45, lerp(_EmitterPreviousPosition, _EmitterPosition, Random(id.x + 912)), _EmitterRadius);
	_ParticleBuffer[id.x].position = RandomOnCircle(id.x + 45, lerp(_EmitterPreviousPosition, _EmitterPosition, Random(id.x + 912)), _EmitterRadius, _EmitterRadiusWidth, _EmitterArcLength, _EmitterArcOffset, _EmitterArcFeathering);
	_ParticleBuffer[id.x].angle = Random(id.x + 2) * TWOPI;
	_ParticleBuffer[id.x].lifetime = Random(id.x + 781)* (_EmitterLifetimeMinMax.y - _EmitterLifetimeMinMax.x) + _EmitterLifetimeMinMax.x;
	_ParticleBuffer[id.x].age = -1;
	_ParticleBuffer[id.x].stimuliIntensity = 0;

	_ParticleBuffer[id.x].color = (Random(id.x + 288) < _EmitterSecondaryColorProbability ? _EmitterSecondaryColor : _EmitterMainColor) * _EmitterColorIntensity;

	if (_EmitterUseColorOverLife)
		_ParticleBuffer[id.x].color *= _EmitterColorOverLife[0];
		
}

float2 GetUVFromPosition(float2 pos) {
	return pos / _TrailSize + float2(0.5, 0.5);
}

float ReadStimuli(float2 pos) {

	float2 posUV = GetUVFromPosition(pos);

	//value.rgb += _Stimuli[id.xy].rgb * _WProj;
	return (0.299 * _Stimuli[posUV * _StimuliResolution.xy].x + 0.587 * _Stimuli[posUV * _StimuliResolution.xy].y + 0.114 * _Stimuli[posUV * _StimuliResolution.xy].z);
}

float ReadTrail(float2 pos) {

	float2 posUV = GetUVFromPosition(pos);
	float value = _TrailRead[posUV * _TrailResolution.xy].w;

	if (_StimuliActive) {
		//value.rgb += _Stimuli[id.xy].rgb * _WProj;
		value += (0.299 * _Stimuli[posUV * _StimuliResolution.xy].x + 0.587 * _Stimuli[posUV * _StimuliResolution.xy].y + 0.114 * _Stimuli[posUV * _StimuliResolution.xy].z) * _StimuliIntensity;
	}

	return value <= _RepulsionLimit ? value : 0.0f;
}

float4 ReadInfluenceMap(float2 pos) {

	return _InfluenceMap.SampleLevel(linearClampSampler, GetUVFromPosition(pos), 0);
}

float4 ReadFluid(float2 pos) {

	return _FluidTexture.SampleLevel(linearClampSampler, GetUVFromPosition(pos), 0);
}

float AngleDifference(float angle1, float angle2) {

	float diff = abs(angle1 - angle2);

	while (diff > TWOPI) {
		diff -= TWOPI;
	}

	return diff;
}

float4 GetColorFromGradient(float time) {

	float4 color = _EmitterColorOverLife[0];
	float stepSize = 1.0f / (GRADIENT_LENGTH - 1);

	for (uint i = 1; i < GRADIENT_LENGTH; i++) {
		float colorPos = saturate((time - stepSize * (i-1)) / stepSize);
		color = lerp(color, _EmitterColorOverLife[i], colorPos);
	}

	return color;
}

float4 BilinearSampling(RWTexture2D<float4> tex, float2 uv, float2 texResolution) {

	const float2 pos = uv * texResolution;
	const int2 zero = int2(0, 0);
	const int2 SizeBounds = int2(texResolution.x - 1, texResolution.y - 1);
	const int2 top_right = clamp(ceil(pos), zero, SizeBounds);
	const int2 bottom_left = clamp(floor(pos), zero, SizeBounds);

	const float2 delta = pos - bottom_left;

	const float4 lt = tex[uint2(bottom_left.x, top_right.y)];
	const float4 rt = tex[uint2(top_right.x, top_right.y)];

	const float4 lb = tex[uint2(bottom_left.x, bottom_left.y)];
	const float4 rb = tex[uint2(top_right.x, bottom_left.y)];

	const float4 h1 = lerp(lt, rt, delta.x);
	const float4 h2 = lerp(lb, rb, delta.x);
	return lerp(h2, h1, delta.y);
}

/**********************
KERNELS
**********************/

[numthreads(NUM_THREADS,1,1)]
void InitParticles(uint3 id: SV_DISPATCHTHREADID)
{
	InitParticle(id);
}

[numthreads(NUM_THREADS, 1, 1)]
void SpawnParticles(uint3 id: SV_DISPATCHTHREADID)
{
	//Spawn
	if (_ParticleBuffer[id.x].age < 0 && Random(id.x + _AbsoluteTime * 1000) < _EmitterSpawnRate * _DeltaTime * _EmitterArcLength / _EmitterCapacity) {
		InitParticle(id);
		_ParticleBuffer[id.x].age = 0;

		//Check with stimuli
		if (_EmitterSpawnInStimuliOnly) {
			if (Random(id.x + 943) > ReadStimuli(_ParticleBuffer[id.x].position))
				_ParticleBuffer[id.x].age = -1;
		}
	}



	//Did not spawn, ignore
	if (_ParticleBuffer[id.x].age < 0)
		return;

	//Age
	_ParticleBuffer[id.x].age += _DeltaTime;

	//Update color
	if (_EmitterUseColorOverLife) {
		_ParticleBuffer[id.x].color = (Random(id.x + 288) < _EmitterSecondaryColorProbability ? _EmitterSecondaryColor : _EmitterMainColor) * _EmitterColorIntensity;
		_ParticleBuffer[id.x].color *= GetColorFromGradient(_ParticleBuffer[id.x].age / _ParticleBuffer[id.x].lifetime);
	}

	//Die
	if (_ParticleBuffer[id.x].age > _ParticleBuffer[id.x].lifetime && _ParticleBuffer[id.x].lifetime > 0)
		_ParticleBuffer[id.x].age = -1;
}

[numthreads(NUM_THREADS,1,1)]
void MoveParticles (uint3 id: SV_DISPATCHTHREADID)
{
	if (_ParticleBuffer[id.x].age < 0)
		return;

	float angle = _ParticleBuffer[id.x].angle;
	float2 pos 	= _ParticleBuffer[id.x].position;

	float offset = Random(id.x + 465) * _EmitterSensorOffsetDistance;

	float sensorAngle = _EmitterSensorAngle;

	if(_UseInfluenceMap)
		sensorAngle = lerp(10 * DEG2RAD, 180 * DEG2RAD, ReadInfluenceMap(pos).x * _InfluenceStrength);

	float rotationAngle = sensorAngle;

	float2 frontPos 		= pos + float2(cos(angle), sin(angle)) * offset;
	float2 frontLeftPos 	= pos + float2(cos(angle + sensorAngle), sin(angle + sensorAngle)) * offset;
	float2 frontRightPos 	= pos + float2(cos(angle - sensorAngle), sin(angle - sensorAngle)) * offset;
	
	float fluidAngle = 0;
	float fluidStrength = _FluidStrength;// *(1.0f - _ParticleBuffer[id.x].age / _ParticleBuffer[id.x].lifetime);
	
	if (fluidStrength != 0) {
		float2 fluidDirection = ReadFluid(pos).xy;

		//Fluid mean to avoid oscillations
		//float2 nextFluidDirection = ReadFluid(pos + _EmitterStepSize * fluidDirection).xy;
		//fluidDirection = (fluidDirection + nextFluidDirection) * 0.5f;

		if (fluidDirection.x > 0) {
			if (fluidDirection.y > 0) {
				fluidAngle = atan(fluidDirection.y / fluidDirection.x);
			}
			else {
				fluidAngle = PI * 2 + atan(fluidDirection.y / fluidDirection.x);
			}
		}
		else {
			fluidAngle = PI + atan(fluidDirection.y / fluidDirection.x);
		}
	}


	float directionAngle = _DirectionAngle;

	if (pos.x > 0) {
		if (pos.y > 0) {
			directionAngle = atan(pos.y / pos.x);
		}
		else {
			directionAngle = PI * 2 + atan(pos.y / pos.x);
		}
	}
	else {
		directionAngle = PI + atan(pos.y / pos.x);
	}

	if (_DirectionStrength < 0)
		directionAngle += PI;

	float F = ReadTrail(frontPos) + (PI - AngleDifference(angle, directionAngle)) * _DirectionStrength + (PI - AngleDifference(angle, fluidAngle)) * fluidStrength;
	float FL = ReadTrail(frontLeftPos) + (PI - AngleDifference(angle + sensorAngle, directionAngle)) * _DirectionStrength + (PI - AngleDifference(angle + sensorAngle, fluidAngle)) * fluidStrength;
	float FR = ReadTrail(frontRightPos) + (PI - AngleDifference(angle - sensorAngle, directionAngle)) * _DirectionStrength + (PI - AngleDifference(angle - sensorAngle, fluidAngle)) * fluidStrength;

	//decide on the next best step
	if((F > FL) && (F > FR))
	{
		//angle -=  rotationAngle;
	}
	else if	((F < FL) && (F < FR))
	{	
		angle = angle + rotationAngle * randomSign(id.x + 369);

		//if (FL > FR) {
		//	angle += rotationAngle;
		//}
		//else {
		//	angle -= rotationAngle;
		//}
	}
	else if	(FL < FR)
	{
		angle -= rotationAngle;
	}
	else if	(FR < FL )
	{
		angle += rotationAngle;
	}

	float2 nextPos = pos + float2(cos(angle), sin(angle)) * _EmitterStepSize;

	//check if nextPos is within the boundries
	//float t1 = insideCircle(nextPos, float2(0.5, 0.5), 0.5);
	//angle = angle + _RotationAngle * randomSign(id.x+7129) * (t1-1);
	//nextPos = saturate(nextPos*t1 + pos*(1-t1));

	_ParticleBuffer[id.x].position = nextPos;
	
	uint2 nextPosCoords = GetUVFromPosition(nextPos) * _TrailResolution.xy;

	if (nextPosCoords.x > 0 && nextPosCoords.x < _TrailResolution.x - 1 && nextPosCoords.y > 0 && nextPosCoords.y < _TrailResolution.y - 1) {
		//Leave a mark in the trail buffer
		_TrailWrite[nextPosCoords] += _ParticleBuffer[id.x].color * 0.01f;	//Additive
		//_TrailWrite[nextPosCoords] = max(_ParticleBuffer[id.x].color, _TrailRead[nextPosCoords]);	//Max
		//_TrailWrite[nextPosCoords] = _ParticleBuffer[id.x].color; //Replace
		//_TrailWrite[nextPosCoords] = lerp(max(_ParticleBuffer[id.x].color, _TrailRead[nextPosCoords]), _ParticleBuffer[id.x].color, 0.5f);
	}
	
	_ParticleBuffer[id.x].angle = angle;

	//Add velocity
	_VelocitiesBuffer[nextPosCoords] += float4(cos(angle), sin(angle), 0, 0);

	if (_StimuliToColor) {
		_ParticleBuffer[id.x].stimuliIntensity = saturate(_ParticleBuffer[id.x].stimuliIntensity + (ReadStimuli(nextPos) - 0.5) * _DeltaTime * _StimuliIntensity * 0.1);
		_ParticleBuffer[id.x].color = lerp(_EmitterSecondaryColor, _EmitterMainColor, _ParticleBuffer[id.x].stimuliIntensity);
	}
}

[numthreads(NUM_THREADS, NUM_THREADS,1)]
void UpdateTrail (uint3 id : SV_DISPATCHTHREADID)
{
	uint2 sampleId = id.xy +_Gravity;
	float4 value = _TrailRead[sampleId];
	
	if (id.x == 0 || id.x >= _TrailResolution.x -1 || id.y == 0 || id.y >=_TrailResolution.y -1) {
		value = float4(0, 0, 0, 0);
	}
	else {
		float3 d = float3(1, -1, 0.0);

		//mean filter
		value = value;
		value += _TrailRead[sampleId - d.xx]; // -1,-1
		value += _TrailRead[sampleId - d.zx]; // 0, -1
		value += _TrailRead[sampleId - d.yx]; // +1, -1
		value += _TrailRead[sampleId - d.xz]; // -1, 0
		value += _TrailRead[sampleId + d.xz]; // +1, 0
		value += _TrailRead[sampleId + d.yx]; // -1, +1
		value += _TrailRead[sampleId + d.zx]; // 0, +1
		value += _TrailRead[sampleId + d.xx]; // +1, +1

		value = (value / 9) * (1 - _Decay);
	}

	_TrailWrite[id.xy] = value;
}

[numthreads(NUM_THREADS, NUM_THREADS, 1)]
void AdvectTrail(uint3 id : SV_DISPATCHTHREADID)
{
	float2 uv = (id.xy + float2(0.5f, 0.5f)) / _TrailResolution;

	float2 fluidValue = _FluidTexture.SampleLevel(linearClampSampler, uv, 0).xy;

	_TrailWrite[id.xy] = _TrailRead.SampleLevel(linearClampSampler, uv + fluidValue * _FluidAdvection, 0);
}

[numthreads(NUM_THREADS, NUM_THREADS, 1)]
void UpdateVelocities(uint3 id : SV_DISPATCHTHREADID)
{
	uint2 sampleId = id.xy;
	float4 value = _VelocitiesBuffer[sampleId];

	float3 d = float3(1, -1, 0.0);

	//mean filter
	value = value;
	value += _VelocitiesBuffer[sampleId - d.xx]; // -1,-1
	value += _VelocitiesBuffer[sampleId - d.zx]; // 0, -1
	value += _VelocitiesBuffer[sampleId - d.yx]; // +1, -1
	value += _VelocitiesBuffer[sampleId - d.xz]; // -1, 0
	value += _VelocitiesBuffer[sampleId + d.xz]; // +1, 0
	value += _VelocitiesBuffer[sampleId + d.yx]; // -1, +1
	value += _VelocitiesBuffer[sampleId + d.zx]; // 0, +1
	value += _VelocitiesBuffer[sampleId + d.xx]; // +1, +1

	value = (value / 9) * (1 - _VelocitiesDecay);

	_VelocitiesBuffer[id.xy] = value;
}

[numthreads(NUM_THREADS, NUM_THREADS, 1)]
void CleanParticleTexture(uint3 id : SV_DISPATCHTHREADID)
{
	_ParticleTexture[id.xy] = float4(0, 0, 0, 0);
}

[numthreads(NUM_THREADS, 1, 1)]
void WriteParticleTexture(uint3 id : SV_DISPATCHTHREADID)
{
	if(_ParticleBuffer[id.x].age >= 0)
		_ParticleTexture[GetUVFromPosition(_ParticleBuffer[id.x].position) * _TrailResolution.xy] = float4(1, 1, 1, 1) * (1.0f - _ParticleBuffer[id.x].age / _ParticleBuffer[id.x].lifetime);
}

[numthreads(NUM_THREADS, 1, 1)]
void UpdateParticleMap(uint3 id : SV_DISPATCHTHREADID)
{
	uint2 mapCoord = uint2(id.x % _ParticlePositionMapSize.x, id.x / _ParticlePositionMapSize.x);

	float2 particlePos = _ParticleBuffer[id.x].position;

	_ParticlePositionMap[mapCoord] = float4(particlePos.x, particlePos.y, _ParticleBuffer[id.x].age, _ParticleBuffer[id.x].lifetime);
	//_ParticleColorMap[mapCoord] = _ParticleBuffer[id.x].color;
	//_ParticleVelocityMap[mapCoord] = float4(_ParticleBuffer[id.x].velocity, 1);
}

